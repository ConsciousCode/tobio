'''
Base classes and protocols for language model connectors.
'''

from abc import ABC, abstractmethod
from dataclasses import dataclass
from typing import AsyncContextManager, Coroutine, Generator, Protocol
from collections.abc import AsyncIterator

from ..util import Registrant

@dataclass
class ModelMessage:
    '''A message within a thread as seen by the model.'''

    content: str
    '''Content of the message.'''

class SystemMessage(ModelMessage):
    '''Message from the system.'''

class AgentMessage(ModelMessage):
    '''Message from an agent.'''

class UserMessage(ModelMessage):
    '''Message from the user.'''

@dataclass
class ActionStep:
    '''Step of a run indicating that an action is required.'''
    
    name: str
    '''Name of the function called.'''
    
    params: dict
    '''Parameters of the function called.'''

@dataclass
class DeltaStep:
    '''A new streamed token was generated by a run.'''
    
    content: str
    '''Content of the token.'''

type Step = ActionStep | DeltaStep
'''A step within a run.'''

class Run(Protocol):
    '''A completion being run by an LLM.'''
    
    def __aiter__(self) -> AsyncIterator[Step]:
        '''Iterate over the run as it is generated.'''
        ...
    
    def __await__(self) -> Generator[None, None, str]:
        '''Await the full completion.'''
        ...

class Provider(Registrant):
    '''Provide access to language models.'''
    
    @abstractmethod
    def __call__(self, prompt: list[ModelMessage]) -> Run:
        '''Build a completion to be resolved by the provider.'''
    
    @classmethod
    @abstractmethod
    def connect(cls, config: dict) -> AsyncContextManager['Provider']:
        '''Connect to the provider.'''